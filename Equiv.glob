DIGEST 31cf4e3a50b63fa01b577d68722c8051
FEquiv
R54:56 Imp <> <> lib
def 2307:2312 <> aequiv
R2323:2326 Imp <> aexp ind
R2352:2356 Imp <> state def
R2376:2378 Coq.Init.Logic <> :type_scope:x_'='_x not
R2365:2369 Imp <> aeval def
R2374:2375 Equiv <> a1 var
R2371:2372 Equiv <> st var
R2379:2383 Imp <> aeval def
R2388:2389 Equiv <> a2 var
R2385:2386 Equiv <> st var
def 2404:2409 <> bequiv
R2420:2423 Imp <> bexp ind
R2449:2453 Imp <> state def
R2473:2475 Coq.Init.Logic <> :type_scope:x_'='_x not
R2462:2466 Imp <> beval def
R2471:2472 Equiv <> b1 var
R2468:2469 Equiv <> st var
R2476:2480 Imp <> beval def
R2485:2486 Equiv <> b2 var
R2482:2483 Equiv <> st var
def 3149:3154 <> cequiv
R3165:3167 Imp <> com ind
R3199:3203 Imp <> state def
R3212:3212 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3227:3233 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3248:3248 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3215:3217 Imp <> ::x_'/'_x_'||'_x not
R3220:3223 Imp <> ::x_'/'_x_'||'_x not
R3213:3214 Equiv <> c1 var
R3218:3219 Equiv <> st var
R3224:3226 Equiv <> st' var
R3236:3238 Imp <> ::x_'/'_x_'||'_x not
R3241:3244 Imp <> ::x_'/'_x_'||'_x not
R3234:3235 Equiv <> c2 var
R3239:3240 Equiv <> st var
R3245:3247 Equiv <> st' var
prf 4242:4255 <> aequiv_example
R4260:4265 Equiv <> aequiv def
R4293:4296 Imp <> ANum constr
R4268:4273 Imp <> AMinus constr
R4284:4286 Imp <> AId constr
R4288:4288 Imp <> X def
R4276:4278 Imp <> AId constr
R4280:4280 Imp <> X def
prf 4351:4364 <> bequiv_example
R4369:4374 Equiv <> bequiv def
R4416:4420 Imp <> BTrue constr
R4377:4379 Imp <> BEq constr
R4407:4410 Imp <> ANum constr
R4382:4387 Imp <> AMinus constr
R4398:4400 Imp <> AId constr
R4402:4402 Imp <> X def
R4390:4392 Imp <> AId constr
R4394:4394 Imp <> X def
R4452:4456 Imp <> beval def
R4469:4482 Equiv <> aequiv_example thm
R4469:4482 Equiv <> aequiv_example thm
prf 4642:4650 <> skip_left
R4665:4670 Equiv <> cequiv def
R4695:4695 Equiv <> c var
R4683:4685 Imp <> ::x_';;'_x not
R4679:4682 Imp <> ::'SKIP' not
R4686:4686 Equiv <> c var
R4873:4877 Imp <> E_Seq constr
R4873:4877 Imp <> E_Seq constr
R4898:4903 Imp <> E_Skip constr
R4898:4903 Imp <> E_Skip constr
prf 5068:5077 <> skip_right
R5092:5097 Equiv <> cequiv def
R5120:5120 Equiv <> c var
R5106:5108 Imp <> ::x_';;'_x not
R5105:5105 Equiv <> c var
R5109:5112 Imp <> ::'SKIP' not
prf 5269:5283 <> IFB_true_simple
R5302:5307 Equiv <> cequiv def
R5350:5351 Equiv <> c1 var
R5315:5318 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5324:5329 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5332:5337 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5340:5342 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5319:5323 Imp <> BTrue constr
R5330:5331 Equiv <> c1 var
R5338:5339 Equiv <> c2 var
R5484:5491 Imp <> E_IfTrue constr
R5484:5491 Imp <> E_IfTrue constr
prf 7396:7403 <> IFB_true
R7451:7456 Equiv <> cequiv def
R7501:7502 Equiv <> c1 var
R7467:7470 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7472:7477 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7480:7485 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7488:7490 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7471:7471 Equiv <> b var
R7478:7479 Equiv <> c1 var
R7486:7487 Equiv <> c2 var
R7427:7432 Equiv <> bequiv def
R7436:7440 Imp <> BTrue constr
R7434:7434 Equiv <> b var
R7757:7764 Imp <> E_IfTrue constr
R7757:7764 Imp <> E_IfTrue constr
prf 7869:7877 <> IFB_false
R7920:7925 Equiv <> cequiv def
R7964:7965 Equiv <> c2 var
R7933:7936 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7938:7943 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7946:7951 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7954:7956 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7937:7937 Equiv <> b var
R7944:7945 Equiv <> c1 var
R7952:7953 Equiv <> c2 var
R7898:7903 Equiv <> bequiv def
R7907:7912 Imp <> BFalse constr
R7905:7905 Equiv <> b var
prf 8156:8171 <> swap_if_branches
R8192:8197 Equiv <> cequiv def
R8235:8238 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8245:8250 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8253:8258 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8261:8263 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8239:8242 Imp <> BNot constr
R8244:8244 Equiv <> b var
R8251:8252 Equiv <> e2 var
R8259:8260 Equiv <> e1 var
R8204:8207 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8209:8214 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8217:8222 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8225:8227 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8208:8208 Equiv <> b var
R8215:8216 Equiv <> e1 var
R8223:8224 Equiv <> e2 var
prf 8645:8655 <> WHILE_false
R8700:8705 Equiv <> cequiv def
R8740:8743 Imp <> ::'SKIP' not
R8715:8720 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8722:8725 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8727:8730 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8721:8721 Equiv <> b var
R8726:8726 Equiv <> c var
R8676:8681 Equiv <> bequiv def
R8685:8690 Imp <> BFalse constr
R8683:8683 Equiv <> b var
R8861:8866 Imp <> E_Skip constr
R8861:8866 Imp <> E_Skip constr
R8979:8988 Imp <> E_WhileEnd constr
R8979:8988 Imp <> E_WhileEnd constr
prf 10317:10334 <> WHILE_true_nonterm
R10385:10387 Coq.Init.Logic <> :type_scope:'~'_x not
R10418:10419 Coq.Init.Logic <> :type_scope:'~'_x not
R10388:10388 Imp <> ::x_'/'_x_'||'_x not
R10405:10408 Imp <> ::x_'/'_x_'||'_x not
R10411:10414 Imp <> ::x_'/'_x_'||'_x not
R10389:10394 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10396:10399 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10401:10404 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10395:10395 Equiv <> b var
R10400:10400 Equiv <> c var
R10409:10410 Equiv <> st var
R10415:10417 Equiv <> st' var
R10362:10367 Equiv <> bequiv def
R10371:10375 Imp <> BTrue constr
R10369:10369 Equiv <> b var
R10502:10507 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10509:10512 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10514:10517 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10502:10507 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10509:10512 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10514:10517 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10829:10834 Equiv <> bequiv def
prf 11349:11358 <> WHILE_true
R11402:11407 Equiv <> cequiv def
R11444:11449 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11455:11458 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11463:11466 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11450:11454 Imp <> BTrue constr
R11459:11462 Imp <> ::'SKIP' not
R11418:11423 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11425:11428 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11430:11433 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11424:11424 Equiv <> b var
R11429:11429 Equiv <> c var
R11378:11383 Equiv <> bequiv def
R11387:11391 Imp <> BTrue constr
R11385:11385 Equiv <> b var
prf 11528:11541 <> loop_unrolling
R11558:11563 Equiv <> cequiv def
R11593:11596 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R11598:11604 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R11625:11631 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R11636:11638 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R11597:11597 Equiv <> b var
R11606:11608 Imp <> ::x_';;'_x not
R11605:11605 Equiv <> c var
R11609:11614 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11616:11619 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11621:11624 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11615:11615 Equiv <> b var
R11620:11620 Equiv <> c var
R11632:11635 Imp <> ::'SKIP' not
R11570:11575 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11577:11580 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11582:11585 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11576:11576 Equiv <> b var
R11581:11581 Equiv <> c var
R11798:11806 Imp <> E_IfFalse constr
R11798:11806 Imp <> E_IfFalse constr
R11827:11832 Imp <> E_Skip constr
R11827:11832 Imp <> E_Skip constr
R11870:11877 Imp <> E_IfTrue constr
R11870:11877 Imp <> E_IfTrue constr
R11904:11908 Imp <> E_Seq constr
R11904:11908 Imp <> E_Seq constr
R12055:12065 Imp <> E_WhileLoop constr
R12055:12065 Imp <> E_WhileLoop constr
R12193:12202 Imp <> E_WhileEnd constr
R12193:12202 Imp <> E_WhileEnd constr
prf 12284:12292 <> seq_assoc
R12315:12320 Equiv <> cequiv def
R12340:12342 Imp <> ::x_';;'_x not
R12349:12349 Imp <> ::x_';;'_x not
R12338:12339 Equiv <> c1 var
R12345:12346 Imp <> ::x_';;'_x not
R12343:12344 Equiv <> c2 var
R12347:12348 Equiv <> c3 var
R12323:12323 Imp <> ::x_';;'_x not
R12330:12332 Imp <> ::x_';;'_x not
R12326:12327 Imp <> ::x_';;'_x not
R12324:12325 Equiv <> c1 var
R12328:12329 Equiv <> c2 var
R12333:12334 Equiv <> c3 var
prf 12702:12730 <> identity_assignment_first_try
R12744:12745 SfLib <> id ind
R12751:12756 Equiv <> cequiv def
R12772:12775 Imp <> ::'SKIP' not
R12760:12764 Imp <> ::x_'::='_x not
R12759:12759 Equiv <> X var
R12765:12767 Imp <> AId constr
R12769:12769 Equiv <> X var
R12881:12886 Imp <> update def
R12881:12886 Imp <> update def
ax 14909:14933 <> functional_extensionality
R14968:14968 Equiv <> Y var
R14963:14963 Equiv <> X var
R15008:15010 Coq.Init.Logic <> :type_scope:x_'='_x not
R15007:15007 Equiv <> f var
R15011:15011 Equiv <> g var
R14988:14988 Equiv <> X var
R14995:14997 Coq.Init.Logic <> :type_scope:x_'='_x not
R14992:14992 Equiv <> f var
R14994:14994 Equiv <> x var
R14998:14998 Equiv <> g var
R15000:15000 Equiv <> x var
prf 15294:15312 <> identity_assignment
R15326:15327 SfLib <> id ind
R15333:15338 Equiv <> cequiv def
R15362:15365 Imp <> ::'SKIP' not
R15346:15350 Imp <> ::x_'::='_x not
R15345:15345 Equiv <> X var
R15351:15353 Imp <> AId constr
R15355:15355 Equiv <> X var
R15470:15475 Imp <> update def
R15470:15475 Imp <> update def
R15535:15559 Equiv <> functional_extensionality prfax
R15535:15559 Equiv <> functional_extensionality prfax
R15585:15595 Imp <> update_same prfax
R15585:15595 Imp <> update_same prfax
R15675:15678 Coq.Init.Logic <> :type_scope:x_'='_x not
R15699:15699 Coq.Init.Logic <> :type_scope:x_'='_x not
R15679:15684 Imp <> update def
R15675:15678 Coq.Init.Logic <> :type_scope:x_'='_x not
R15699:15699 Coq.Init.Logic <> :type_scope:x_'='_x not
R15679:15684 Imp <> update def
R15719:15743 Equiv <> functional_extensionality prfax
R15719:15743 Equiv <> functional_extensionality prfax
R15772:15782 Imp <> update_same prfax
R15772:15782 Imp <> update_same prfax
prf 15916:15928 <> assign_aequiv
R15969:15974 Equiv <> cequiv def
R15983:15987 Imp <> ::x_'::='_x not
R15982:15982 Equiv <> X var
R15988:15988 Equiv <> e var
R15976:15979 Imp <> ::'SKIP' not
R15946:15951 Equiv <> aequiv def
R15961:15961 Equiv <> e var
R15954:15956 Imp <> AId constr
R15958:15958 Equiv <> X var
prf 16576:16586 <> refl_aequiv
R16602:16605 Imp <> aexp ind
R16609:16614 Equiv <> aequiv def
R16618:16618 Equiv <> a var
R16616:16616 Equiv <> a var
prf 16669:16678 <> sym_aequiv
R16698:16701 Imp <> aexp ind
R16724:16729 Equiv <> aequiv def
R16734:16735 Equiv <> a1 var
R16731:16732 Equiv <> a2 var
R16708:16713 Equiv <> aequiv def
R16718:16719 Equiv <> a2 var
R16715:16716 Equiv <> a1 var
prf 16806:16817 <> trans_aequiv
R16840:16843 Imp <> aexp ind
R16882:16887 Equiv <> aequiv def
R16892:16893 Equiv <> a3 var
R16889:16890 Equiv <> a1 var
R16866:16871 Equiv <> aequiv def
R16876:16877 Equiv <> a3 var
R16873:16874 Equiv <> a2 var
R16850:16855 Equiv <> aequiv def
R16860:16861 Equiv <> a2 var
R16857:16858 Equiv <> a1 var
R16913:16918 Equiv <> aequiv def
prf 17013:17023 <> refl_bequiv
R17039:17042 Imp <> bexp ind
R17046:17051 Equiv <> bequiv def
R17055:17055 Equiv <> b var
R17053:17053 Equiv <> b var
R17074:17079 Equiv <> bequiv def
prf 17121:17130 <> sym_bequiv
R17150:17153 Imp <> bexp ind
R17176:17181 Equiv <> bequiv def
R17186:17187 Equiv <> b1 var
R17183:17184 Equiv <> b2 var
R17160:17165 Equiv <> bequiv def
R17170:17171 Equiv <> b2 var
R17167:17168 Equiv <> b1 var
R17206:17211 Equiv <> bequiv def
prf 17273:17284 <> trans_bequiv
R17307:17310 Imp <> bexp ind
R17349:17354 Equiv <> bequiv def
R17359:17360 Equiv <> b3 var
R17356:17357 Equiv <> b1 var
R17333:17338 Equiv <> bequiv def
R17343:17344 Equiv <> b3 var
R17340:17341 Equiv <> b2 var
R17317:17322 Equiv <> bequiv def
R17327:17328 Equiv <> b2 var
R17324:17325 Equiv <> b1 var
R17380:17385 Equiv <> bequiv def
prf 17480:17490 <> refl_cequiv
R17506:17508 Imp <> com ind
R17512:17517 Equiv <> cequiv def
R17521:17521 Equiv <> c var
R17519:17519 Equiv <> c var
R17540:17545 Equiv <> cequiv def
R17571:17578 Coq.Init.Logic <> iff_refl thm
R17571:17578 Coq.Init.Logic <> iff_refl thm
prf 17594:17603 <> sym_cequiv
R17623:17625 Imp <> com ind
R17648:17653 Equiv <> cequiv def
R17658:17659 Equiv <> c1 var
R17655:17656 Equiv <> c2 var
R17632:17637 Equiv <> cequiv def
R17642:17643 Equiv <> c2 var
R17639:17640 Equiv <> c1 var
R17678:17683 Equiv <> cequiv def
R17733:17737 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R17721:17723 Imp <> ::x_'/'_x_'||'_x not
R17726:17729 Imp <> ::x_'/'_x_'||'_x not
R17740:17742 Imp <> ::x_'/'_x_'||'_x not
R17745:17748 Imp <> ::x_'/'_x_'||'_x not
R17733:17737 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R17721:17723 Imp <> ::x_'/'_x_'||'_x not
R17726:17729 Imp <> ::x_'/'_x_'||'_x not
R17740:17742 Imp <> ::x_'/'_x_'||'_x not
R17745:17748 Imp <> ::x_'/'_x_'||'_x not
R17811:17817 Coq.Init.Logic <> iff_sym thm
R17811:17817 Coq.Init.Logic <> iff_sym thm
prf 17844:17852 <> iff_trans
R17918:17922 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R17916:17917 Equiv <> P1 var
R17923:17924 Equiv <> P3 var
R17903:17907 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R17901:17902 Equiv <> P2 var
R17908:17909 Equiv <> P3 var
R17888:17892 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R17886:17887 Equiv <> P1 var
R17893:17894 Equiv <> P2 var
prf 18092:18103 <> trans_cequiv
R18126:18128 Imp <> com ind
R18167:18172 Equiv <> cequiv def
R18177:18178 Equiv <> c3 var
R18174:18175 Equiv <> c1 var
R18151:18156 Equiv <> cequiv def
R18161:18162 Equiv <> c3 var
R18158:18159 Equiv <> c2 var
R18135:18140 Equiv <> cequiv def
R18145:18146 Equiv <> c2 var
R18142:18143 Equiv <> c1 var
R18198:18203 Equiv <> cequiv def
R18264:18266 Imp <> ::x_'/'_x_'||'_x not
R18269:18272 Imp <> ::x_'/'_x_'||'_x not
R18246:18254 Equiv <> iff_trans thm
R18264:18266 Imp <> ::x_'/'_x_'||'_x not
R18269:18272 Imp <> ::x_'/'_x_'||'_x not
R18246:18254 Equiv <> iff_trans thm
prf 19631:19645 <> CAss_congruence
R19687:19692 Equiv <> cequiv def
R19707:19710 Imp <> CAss constr
R19714:19716 Equiv <> a1' var
R19712:19712 Equiv <> i var
R19695:19698 Imp <> CAss constr
R19702:19703 Equiv <> a1 var
R19700:19700 Equiv <> i var
R19668:19673 Equiv <> aequiv def
R19678:19680 Equiv <> a1' var
R19675:19676 Equiv <> a1 var
R19829:19833 Imp <> E_Ass constr
R19829:19833 Imp <> E_Ass constr
R19916:19920 Imp <> E_Ass constr
R19916:19920 Imp <> E_Ass constr
prf 21774:21790 <> CWhile_congruence
R21854:21859 Equiv <> cequiv def
R21883:21888 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21892:21895 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21899:21902 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21889:21891 Equiv <> b1' var
R21896:21898 Equiv <> c1' var
R21862:21867 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21870:21873 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21876:21879 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21868:21869 Equiv <> b1 var
R21874:21875 Equiv <> c1 var
R21835:21840 Equiv <> cequiv def
R21845:21847 Equiv <> c1' var
R21842:21843 Equiv <> c1 var
R21818:21823 Equiv <> bequiv def
R21828:21830 Equiv <> b1' var
R21825:21826 Equiv <> b1 var
R21946:21951 Equiv <> bequiv def
R21953:21958 Equiv <> cequiv def
R22050:22055 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22058:22061 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22064:22067 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22050:22055 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22058:22061 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22064:22067 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22178:22187 Imp <> E_WhileEnd constr
R22178:22187 Imp <> E_WhileEnd constr
R22253:22263 Imp <> E_WhileLoop constr
R22253:22263 Imp <> E_WhileLoop constr
R22520:22525 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22529:22532 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22536:22539 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22520:22525 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22529:22532 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22536:22539 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22653:22662 Imp <> E_WhileEnd constr
R22653:22662 Imp <> E_WhileEnd constr
R22728:22738 Imp <> E_WhileLoop constr
R22728:22738 Imp <> E_WhileLoop constr
prf 23041:23055 <> CSeq_congruence
R23119:23124 Equiv <> cequiv def
R23139:23140 Imp <> ::x_';;'_x not
R23136:23138 Equiv <> c1' var
R23141:23143 Equiv <> c2' var
R23129:23130 Imp <> ::x_';;'_x not
R23127:23128 Equiv <> c1 var
R23131:23132 Equiv <> c2 var
R23100:23105 Equiv <> cequiv def
R23110:23112 Equiv <> c2' var
R23107:23108 Equiv <> c2 var
R23083:23088 Equiv <> cequiv def
R23093:23095 Equiv <> c1' var
R23090:23091 Equiv <> c1 var
prf 23252:23265 <> CIf_congruence
R23349:23354 Equiv <> cequiv def
R23384:23387 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23390:23395 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23399:23404 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23408:23410 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23388:23389 Equiv <> b' var
R23396:23398 Equiv <> c1' var
R23405:23407 Equiv <> c2' var
R23357:23360 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23362:23367 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23370:23375 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23378:23380 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23361:23361 Equiv <> b var
R23368:23369 Equiv <> c1 var
R23376:23377 Equiv <> c2 var
R23330:23335 Equiv <> cequiv def
R23340:23342 Equiv <> c2' var
R23337:23338 Equiv <> c2 var
R23313:23318 Equiv <> cequiv def
R23323:23325 Equiv <> c1' var
R23320:23321 Equiv <> c1 var
R23298:23303 Equiv <> bequiv def
R23307:23308 Equiv <> b' var
R23305:23305 Equiv <> b var
def 23565:23582 <> congruence_example
R23587:23592 Equiv <> cequiv def
R23775:23782 Imp <> ::x_';;'_x not
R23764:23768 Imp <> ::x_'::='_x not
R23763:23763 Imp <> X def
R23769:23772 Imp <> ANum constr
R23783:23787 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23808:23826 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23855:23898 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23912:23919 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23788:23790 Imp <> BEq constr
R23801:23804 Imp <> ANum constr
R23793:23795 Imp <> AId constr
R23797:23797 Imp <> X def
R23828:23832 Imp <> ::x_'::='_x not
R23827:23827 Imp <> Y def
R23833:23838 Imp <> AMinus constr
R23849:23851 Imp <> AId constr
R23853:23853 Imp <> X def
R23841:23843 Imp <> AId constr
R23845:23845 Imp <> X def
R23900:23904 Imp <> ::x_'::='_x not
R23899:23899 Imp <> Y def
R23905:23908 Imp <> ANum constr
R23632:23639 Imp <> ::x_';;'_x not
R23621:23625 Imp <> ::x_'::='_x not
R23620:23620 Imp <> X def
R23626:23629 Imp <> ANum constr
R23640:23644 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23665:23683 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23696:23713 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23727:23734 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23645:23647 Imp <> BEq constr
R23658:23661 Imp <> ANum constr
R23650:23652 Imp <> AId constr
R23654:23654 Imp <> X def
R23685:23689 Imp <> ::x_'::='_x not
R23684:23684 Imp <> Y def
R23690:23693 Imp <> ANum constr
R23715:23719 Imp <> ::x_'::='_x not
R23714:23714 Imp <> Y def
R23720:23723 Imp <> ANum constr
R23938:23952 Equiv <> CSeq_congruence prfax
R23938:23952 Equiv <> CSeq_congruence prfax
R23966:23976 Equiv <> refl_cequiv thm
R23966:23976 Equiv <> refl_cequiv thm
R23990:24003 Equiv <> CIf_congruence prfax
R23990:24003 Equiv <> CIf_congruence prfax
R24018:24028 Equiv <> refl_bequiv thm
R24018:24028 Equiv <> refl_bequiv thm
R24043:24057 Equiv <> CAss_congruence thm
R24043:24057 Equiv <> CAss_congruence thm
R24067:24072 Equiv <> aequiv def
R24107:24116 Coq.Arith.Minus <> minus_diag thm
R24107:24116 Coq.Arith.Minus <> minus_diag thm
R24131:24141 Equiv <> refl_cequiv thm
R24131:24141 Equiv <> refl_cequiv thm
def 24819:24830 <> atrans_sound
R24850:24853 Imp <> aexp ind
R24842:24845 Imp <> aexp ind
R24880:24883 Imp <> aexp ind
R24891:24896 Equiv <> aequiv def
R24901:24906 Equiv <> atrans var
R24908:24908 Equiv <> a var
R24898:24898 Equiv <> a var
def 24924:24935 <> btrans_sound
R24955:24958 Imp <> bexp ind
R24947:24950 Imp <> bexp ind
R24985:24988 Imp <> bexp ind
R24996:25001 Equiv <> bequiv def
R25006:25011 Equiv <> btrans var
R25013:25013 Equiv <> b var
R25003:25003 Equiv <> b var
def 25029:25040 <> ctrans_sound
R25059:25061 Imp <> com ind
R25052:25054 Imp <> com ind
R25088:25090 Imp <> com ind
R25098:25103 Equiv <> cequiv def
R25108:25113 Equiv <> ctrans var
R25115:25115 Equiv <> c var
R25105:25105 Equiv <> c var
def 25433:25451 <> fold_constants_aexp
R25458:25461 Imp <> aexp ind
R25466:25469 Imp <> aexp ind
R25482:25482 Equiv <> a var
R25493:25496 Imp <> ANum constr
R25509:25512 Imp <> ANum constr
R25520:25522 Imp <> AId constr
R25536:25538 Imp <> AId constr
R25546:25550 Imp <> APlus constr
R25575:25575 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25598:25599 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25622:25622 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25576:25594 Equiv <> fold_constants_aexp def
R25600:25618 Equiv <> fold_constants_aexp def
R25637:25637 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25645:25646 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25654:25654 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25638:25641 Imp <> ANum constr
R25647:25650 Imp <> ANum constr
R25659:25662 Imp <> ANum constr
R25667:25669 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R25682:25682 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25686:25687 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25691:25691 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25696:25700 Imp <> APlus constr
R25724:25729 Imp <> AMinus constr
R25753:25753 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25776:25777 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25800:25800 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25754:25772 Equiv <> fold_constants_aexp def
R25778:25796 Equiv <> fold_constants_aexp def
R25815:25815 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25823:25824 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25832:25832 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25816:25819 Imp <> ANum constr
R25825:25828 Imp <> ANum constr
R25837:25840 Imp <> ANum constr
R25845:25847 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R25860:25860 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25864:25865 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25869:25869 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25874:25879 Imp <> AMinus constr
R25903:25907 Imp <> AMult constr
R25932:25932 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25955:25956 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25979:25979 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25933:25951 Equiv <> fold_constants_aexp def
R25957:25975 Equiv <> fold_constants_aexp def
R25994:25994 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26002:26003 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26011:26011 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25995:25998 Imp <> ANum constr
R26004:26007 Imp <> ANum constr
R26016:26019 Imp <> ANum constr
R26024:26026 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R26039:26039 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26043:26044 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26048:26048 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26053:26057 Imp <> AMult constr
def 26093:26105 <> fold_aexp_ex1
R26181:26186 Coq.Init.Logic <> :type_scope:x_'='_x not
R26113:26131 Equiv <> fold_constants_aexp def
R26141:26145 Imp <> AMult constr
R26174:26176 Imp <> AId constr
R26178:26178 Imp <> X def
R26148:26152 Imp <> APlus constr
R26164:26167 Imp <> ANum constr
R26155:26158 Imp <> ANum constr
R26187:26191 Imp <> AMult constr
R26203:26205 Imp <> AId constr
R26207:26207 Imp <> X def
R26194:26197 Imp <> ANum constr
def 26550:26562 <> fold_aexp_ex2
R26655:26659 Coq.Init.Logic <> :type_scope:x_'='_x not
R26570:26588 Equiv <> fold_constants_aexp def
R26598:26603 Imp <> AMinus constr
R26614:26618 Imp <> APlus constr
R26647:26649 Imp <> AId constr
R26651:26651 Imp <> Y def
R26621:26625 Imp <> AMult constr
R26637:26640 Imp <> ANum constr
R26628:26631 Imp <> ANum constr
R26606:26608 Imp <> AId constr
R26610:26610 Imp <> X def
R26660:26665 Imp <> AMinus constr
R26676:26680 Imp <> APlus constr
R26692:26694 Imp <> AId constr
R26696:26696 Imp <> Y def
R26683:26686 Imp <> ANum constr
R26668:26670 Imp <> AId constr
R26672:26672 Imp <> X def
def 26912:26930 <> fold_constants_bexp
R26937:26940 Imp <> bexp ind
R26945:26948 Imp <> bexp ind
R26961:26961 Equiv <> b var
R26972:26976 Imp <> BTrue constr
R26988:26992 Imp <> BTrue constr
R26998:27003 Imp <> BFalse constr
R27014:27019 Imp <> BFalse constr
R27025:27027 Imp <> BEq constr
R27052:27052 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27075:27076 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27099:27099 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27053:27071 Equiv <> fold_constants_aexp def
R27077:27095 Equiv <> fold_constants_aexp def
R27114:27114 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27122:27123 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27131:27131 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27115:27118 Imp <> ANum constr
R27124:27127 Imp <> ANum constr
R27139:27145 Coq.Arith.EqNat <> beq_nat def
R27169:27174 Imp <> BFalse constr
R27158:27162 Imp <> BTrue constr
R27184:27184 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27188:27189 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27193:27193 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27198:27200 Imp <> BEq constr
R27224:27226 Imp <> BLe constr
R27251:27251 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27274:27275 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27298:27298 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27252:27270 Equiv <> fold_constants_aexp def
R27276:27294 Equiv <> fold_constants_aexp def
R27313:27313 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27321:27322 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27330:27330 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27314:27317 Imp <> ANum constr
R27323:27326 Imp <> ANum constr
R27338:27344 SfLib <> ble_nat def
R27368:27373 Imp <> BFalse constr
R27357:27361 Imp <> BTrue constr
R27383:27383 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27387:27388 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27392:27392 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27397:27399 Imp <> BLe constr
R27423:27426 Imp <> BNot constr
R27449:27467 Equiv <> fold_constants_bexp def
R27486:27490 Imp <> BTrue constr
R27495:27500 Imp <> BFalse constr
R27510:27515 Imp <> BFalse constr
R27520:27524 Imp <> BTrue constr
R27541:27544 Imp <> BNot constr
R27564:27567 Imp <> BAnd constr
R27592:27592 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27615:27616 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27639:27639 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27593:27611 Equiv <> fold_constants_bexp def
R27617:27635 Equiv <> fold_constants_bexp def
R27654:27654 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27660:27661 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27667:27667 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27655:27659 Imp <> BTrue constr
R27662:27666 Imp <> BTrue constr
R27672:27676 Imp <> BTrue constr
R27686:27686 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27692:27693 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27700:27700 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27687:27691 Imp <> BTrue constr
R27694:27699 Imp <> BFalse constr
R27705:27710 Imp <> BFalse constr
R27720:27720 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27727:27728 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27734:27734 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27721:27726 Imp <> BFalse constr
R27729:27733 Imp <> BTrue constr
R27739:27744 Imp <> BFalse constr
R27754:27754 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27761:27762 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27769:27769 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27755:27760 Imp <> BFalse constr
R27763:27768 Imp <> BFalse constr
R27774:27779 Imp <> BFalse constr
R27789:27789 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27793:27794 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27798:27798 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27803:27806 Imp <> BAnd constr
def 27842:27854 <> fold_bexp_ex1
R27921:27925 Coq.Init.Logic <> :type_scope:x_'='_x not
R27862:27880 Equiv <> fold_constants_bexp def
R27883:27886 Imp <> BAnd constr
R27895:27898 Imp <> BNot constr
R27901:27904 Imp <> BAnd constr
R27913:27917 Imp <> BTrue constr
R27906:27911 Imp <> BFalse constr
R27888:27892 Imp <> BTrue constr
R27926:27930 Imp <> BTrue constr
def 27967:27979 <> fold_bexp_ex2
R28132:28136 Coq.Init.Logic <> :type_scope:x_'='_x not
R27987:28005 Equiv <> fold_constants_bexp def
R28015:28018 Imp <> BAnd constr
R28056:28058 Imp <> BEq constr
R28088:28093 Imp <> AMinus constr
R28105:28109 Imp <> APlus constr
R28121:28124 Imp <> ANum constr
R28112:28115 Imp <> ANum constr
R28096:28099 Imp <> ANum constr
R28061:28064 Imp <> ANum constr
R28021:28023 Imp <> BEq constr
R28034:28036 Imp <> AId constr
R28038:28038 Imp <> Y def
R28026:28028 Imp <> AId constr
R28030:28030 Imp <> X def
R28137:28140 Imp <> BAnd constr
R28164:28168 Imp <> BTrue constr
R28143:28145 Imp <> BEq constr
R28156:28158 Imp <> AId constr
R28160:28160 Imp <> Y def
R28148:28150 Imp <> AId constr
R28152:28152 Imp <> X def
def 28322:28339 <> fold_constants_com
R28346:28348 Imp <> com ind
R28353:28355 Imp <> com ind
R28368:28368 Equiv <> c var
R28379:28382 Imp <> ::'SKIP' not
R28399:28402 Imp <> ::'SKIP' not
R28409:28413 Imp <> ::x_'::='_x not
R28427:28430 Imp <> CAss constr
R28435:28453 Equiv <> fold_constants_aexp def
R28464:28467 Imp <> ::x_';;'_x not
R28482:28482 Imp <> ::x_';;'_x not
R28504:28509 Imp <> ::x_';;'_x not
R28531:28531 Imp <> ::x_';;'_x not
R28483:28500 Equiv <> fold_constants_com def
R28510:28527 Equiv <> fold_constants_com def
R28537:28540 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28542:28547 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28550:28555 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28558:28560 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28578:28596 Equiv <> fold_constants_bexp def
R28613:28617 Imp <> BTrue constr
R28622:28639 Equiv <> fold_constants_com def
R28652:28657 Imp <> BFalse constr
R28662:28679 Equiv <> fold_constants_com def
R28698:28701 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28704:28709 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28731:28758 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28780:28782 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28710:28727 Equiv <> fold_constants_com def
R28759:28776 Equiv <> fold_constants_com def
R28798:28803 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28805:28808 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28810:28813 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28831:28849 Equiv <> fold_constants_bexp def
R28866:28870 Imp <> BTrue constr
R28875:28880 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28886:28889 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28894:28897 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28881:28885 Imp <> BTrue constr
R28890:28893 Imp <> ::'SKIP' not
R28907:28912 Imp <> BFalse constr
R28917:28920 Imp <> ::'SKIP' not
R28936:28941 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28944:28948 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28969:28973 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28949:28966 Equiv <> fold_constants_com def
R28968:28968 Equiv <> c var
def 29001:29012 <> fold_com_ex1
R29468:29508 Coq.Init.Logic <> :type_scope:x_'='_x not
R29770:29770 Coq.Init.Logic <> :type_scope:x_'='_x not
R29018:29035 Equiv <> fold_constants_com def
R29100:29107 Imp <> ::x_';;'_x not
R29072:29076 Imp <> ::x_'::='_x not
R29071:29071 Imp <> X def
R29077:29081 Imp <> APlus constr
R29093:29096 Imp <> ANum constr
R29084:29087 Imp <> ANum constr
R29137:29144 Imp <> ::x_';;'_x not
R29109:29113 Imp <> ::x_'::='_x not
R29108:29108 Imp <> Y def
R29114:29119 Imp <> AMinus constr
R29130:29133 Imp <> ANum constr
R29122:29124 Imp <> AId constr
R29126:29126 Imp <> X def
R29259:29266 Imp <> ::x_';;'_x not
R29145:29148 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29203:29215 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29220:29238 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29251:29258 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29149:29151 Imp <> BEq constr
R29179:29183 Imp <> APlus constr
R29195:29198 Imp <> ANum constr
R29186:29189 Imp <> ANum constr
R29154:29159 Imp <> AMinus constr
R29170:29172 Imp <> AId constr
R29174:29174 Imp <> Y def
R29162:29164 Imp <> AId constr
R29166:29166 Imp <> X def
R29216:29219 Imp <> ::'SKIP' not
R29240:29244 Imp <> ::x_'::='_x not
R29239:29239 Imp <> Y def
R29245:29248 Imp <> ANum constr
R29383:29390 Imp <> ::x_';;'_x not
R29267:29270 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29327:29339 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29352:29369 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29374:29382 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29271:29273 Imp <> BLe constr
R29285:29290 Imp <> AMinus constr
R29302:29306 Imp <> APlus constr
R29318:29321 Imp <> ANum constr
R29309:29312 Imp <> ANum constr
R29293:29296 Imp <> ANum constr
R29276:29279 Imp <> ANum constr
R29341:29345 Imp <> ::x_'::='_x not
R29340:29340 Imp <> Y def
R29346:29349 Imp <> ANum constr
R29370:29373 Imp <> ::'SKIP' not
R29391:29396 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29417:29428 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29457:29466 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29397:29399 Imp <> BEq constr
R29410:29413 Imp <> ANum constr
R29402:29404 Imp <> AId constr
R29406:29406 Imp <> Y def
R29430:29434 Imp <> ::x_'::='_x not
R29429:29429 Imp <> X def
R29435:29439 Imp <> APlus constr
R29450:29453 Imp <> ANum constr
R29442:29444 Imp <> AId constr
R29446:29446 Imp <> X def
R29521:29528 Imp <> ::x_';;'_x not
R29510:29514 Imp <> ::x_'::='_x not
R29509:29509 Imp <> X def
R29515:29518 Imp <> ANum constr
R29558:29565 Imp <> ::x_';;'_x not
R29530:29534 Imp <> ::x_'::='_x not
R29529:29529 Imp <> Y def
R29535:29540 Imp <> AMinus constr
R29551:29554 Imp <> ANum constr
R29543:29545 Imp <> AId constr
R29547:29547 Imp <> X def
R29666:29673 Imp <> ::x_';;'_x not
R29566:29569 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29607:29619 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29624:29643 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29656:29665 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29570:29572 Imp <> BEq constr
R29600:29603 Imp <> ANum constr
R29575:29580 Imp <> AMinus constr
R29591:29593 Imp <> AId constr
R29595:29595 Imp <> Y def
R29583:29585 Imp <> AId constr
R29587:29587 Imp <> X def
R29620:29623 Imp <> ::'SKIP' not
R29645:29649 Imp <> ::x_'::='_x not
R29644:29644 Imp <> Y def
R29650:29653 Imp <> ANum constr
R29686:29693 Imp <> ::x_';;'_x not
R29675:29679 Imp <> ::x_'::='_x not
R29674:29674 Imp <> Y def
R29680:29683 Imp <> ANum constr
R29694:29699 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29720:29731 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29760:29769 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29700:29702 Imp <> BEq constr
R29713:29716 Imp <> ANum constr
R29705:29707 Imp <> AId constr
R29709:29709 Imp <> Y def
R29733:29737 Imp <> ::x_'::='_x not
R29732:29732 Imp <> X def
R29738:29742 Imp <> APlus constr
R29753:29756 Imp <> ANum constr
R29745:29747 Imp <> AId constr
R29749:29749 Imp <> X def
prf 30020:30044 <> fold_constants_aexp_sound
R30051:30062 Equiv <> atrans_sound def
R30064:30082 Equiv <> fold_constants_aexp def
R30101:30112 Equiv <> atrans_sound def
R30132:30137 Equiv <> aequiv def
R30566:30584 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30566:30584 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30566:30584 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30566:30584 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
R30610:30628 Equiv <> fold_constants_aexp def
prf 33630:33654 <> fold_constants_bexp_sound
R33660:33671 Equiv <> btrans_sound def
R33673:33691 Equiv <> fold_constants_bexp def
R33710:33721 Equiv <> btrans_sound def
R33741:33746 Equiv <> bequiv def
R34257:34275 Equiv <> fold_constants_aexp def
R34257:34275 Equiv <> fold_constants_aexp def
R34314:34332 Equiv <> fold_constants_aexp def
R34314:34332 Equiv <> fold_constants_aexp def
R34370:34374 Imp <> aeval def
R34389:34393 Imp <> aeval def
R34436:34460 Equiv <> fold_constants_aexp_sound thm
R34389:34393 Imp <> aeval def
R34370:34374 Imp <> aeval def
R34436:34460 Equiv <> fold_constants_aexp_sound thm
R34490:34494 Imp <> aeval def
R34509:34513 Imp <> aeval def
R34556:34580 Equiv <> fold_constants_aexp_sound thm
R34509:34513 Imp <> aeval def
R34490:34494 Imp <> aeval def
R34556:34580 Equiv <> fold_constants_aexp_sound thm
R34771:34777 Coq.Arith.EqNat <> beq_nat def
R34771:34777 Coq.Arith.EqNat <> beq_nat def
R34881:34899 Equiv <> fold_constants_bexp def
R34881:34899 Equiv <> fold_constants_bexp def
R35012:35030 Equiv <> fold_constants_bexp def
R35012:35030 Equiv <> fold_constants_bexp def
R35070:35088 Equiv <> fold_constants_bexp def
R35070:35088 Equiv <> fold_constants_bexp def
prf 35330:35353 <> fold_constants_com_sound
R35360:35371 Equiv <> ctrans_sound def
R35373:35390 Equiv <> fold_constants_com def
R35410:35421 Equiv <> ctrans_sound def
R35495:35505 Equiv <> refl_cequiv thm
R35495:35505 Equiv <> refl_cequiv thm
R35528:35542 Equiv <> CAss_congruence thm
R35528:35542 Equiv <> CAss_congruence thm
R35551:35575 Equiv <> fold_constants_aexp_sound thm
R35551:35575 Equiv <> fold_constants_aexp_sound thm
R35597:35611 Equiv <> CSeq_congruence prfax
R35597:35611 Equiv <> CSeq_congruence prfax
R35653:35658 Equiv <> bequiv def
R35663:35681 Equiv <> fold_constants_bexp def
R35653:35658 Equiv <> bequiv def
R35663:35681 Equiv <> fold_constants_bexp def
R35725:35749 Equiv <> fold_constants_bexp_sound thm
R35725:35749 Equiv <> fold_constants_bexp_sound thm
R35766:35784 Equiv <> fold_constants_bexp def
R35958:35971 Equiv <> CIf_congruence prfax
R35766:35784 Equiv <> fold_constants_bexp def
R35958:35971 Equiv <> CIf_congruence prfax
R35958:35971 Equiv <> CIf_congruence prfax
R35958:35971 Equiv <> CIf_congruence prfax
R35958:35971 Equiv <> CIf_congruence prfax
R35958:35971 Equiv <> CIf_congruence prfax
R35958:35971 Equiv <> CIf_congruence prfax
R36026:36037 Equiv <> trans_cequiv thm
R36026:36037 Equiv <> trans_cequiv thm
R36076:36083 Equiv <> IFB_true thm
R36076:36083 Equiv <> IFB_true thm
R36138:36149 Equiv <> trans_cequiv thm
R36138:36149 Equiv <> trans_cequiv thm
R36188:36196 Equiv <> IFB_false prfax
R36188:36196 Equiv <> IFB_false prfax
def 38630:38639 <> subst_aexp
R38646:38647 SfLib <> id ind
R38655:38658 Imp <> aexp ind
R38666:38669 Imp <> aexp ind
R38674:38677 Imp <> aexp ind
R38690:38690 Equiv <> a var
R38701:38704 Imp <> ANum constr
R38717:38720 Imp <> ANum constr
R38728:38730 Imp <> AId constr
R38747:38755 SfLib <> eq_id_dec thm
R38757:38757 Equiv <> i var
R38774:38776 Imp <> AId constr
R38767:38767 Equiv <> u var
R38785:38789 Imp <> APlus constr
R38801:38805 Imp <> APlus constr
R38828:38837 Equiv <> subst_aexp def
R38841:38841 Equiv <> u var
R38839:38839 Equiv <> i var
R38808:38817 Equiv <> subst_aexp def
R38821:38821 Equiv <> u var
R38819:38819 Equiv <> i var
R38851:38856 Imp <> AMinus constr
R38867:38872 Imp <> AMinus constr
R38895:38904 Equiv <> subst_aexp def
R38908:38908 Equiv <> u var
R38906:38906 Equiv <> i var
R38875:38884 Equiv <> subst_aexp def
R38888:38888 Equiv <> u var
R38886:38886 Equiv <> i var
R38918:38922 Imp <> AMult constr
R38934:38938 Imp <> AMult constr
R38961:38970 Equiv <> subst_aexp def
R38974:38974 Equiv <> u var
R38972:38972 Equiv <> i var
R38941:38950 Equiv <> subst_aexp def
R38954:38954 Equiv <> u var
R38952:38952 Equiv <> i var
def 38996:39008 <> subst_aexp_ex
R39078:39083 Coq.Init.Logic <> :type_scope:x_'='_x not
R39125:39125 Coq.Init.Logic <> :type_scope:x_'='_x not
R39014:39023 Equiv <> subst_aexp def
R39056:39060 Imp <> APlus constr
R39071:39073 Imp <> AId constr
R39075:39075 Imp <> X def
R39063:39065 Imp <> AId constr
R39067:39067 Imp <> Y def
R39028:39032 Imp <> APlus constr
R39045:39048 Imp <> ANum constr
R39035:39038 Imp <> ANum constr
R39025:39025 Imp <> X def
R39084:39088 Imp <> APlus constr
R39099:39103 Imp <> APlus constr
R39116:39119 Imp <> ANum constr
R39106:39109 Imp <> ANum constr
R39091:39093 Imp <> AId constr
R39095:39095 Imp <> Y def
def 39321:39340 <> subst_equiv_property
R39367:39372 Equiv <> cequiv def
R39417:39419 Imp <> ::x_';;'_x not
R39410:39414 Imp <> ::x_'::='_x not
R39408:39409 Equiv <> i1 var
R39415:39416 Equiv <> a1 var
R39422:39426 Imp <> ::x_'::='_x not
R39420:39421 Equiv <> i2 var
R39427:39436 Equiv <> subst_aexp def
R39444:39445 Equiv <> a2 var
R39441:39442 Equiv <> a1 var
R39438:39439 Equiv <> i1 var
R39384:39386 Imp <> ::x_';;'_x not
R39377:39381 Imp <> ::x_'::='_x not
R39375:39376 Equiv <> i1 var
R39382:39383 Equiv <> a1 var
R39389:39393 Imp <> ::x_'::='_x not
R39387:39388 Equiv <> i2 var
R39394:39395 Equiv <> a2 var
prf 40688:40700 <> subst_inequiv
R40707:40708 Coq.Init.Logic <> :type_scope:'~'_x not
R40709:40728 Equiv <> subst_equiv_property def
R40747:40766 Equiv <> subst_equiv_property def
R40977:40992 Imp <> ::x_';;'_x not
R40950:40954 Imp <> ::x_'::='_x not
R40949:40949 Imp <> X def
R40955:40959 Imp <> APlus constr
R40970:40973 Imp <> ANum constr
R40962:40964 Imp <> AId constr
R40966:40966 Imp <> X def
R40994:40998 Imp <> ::x_'::='_x not
R40993:40993 Imp <> Y def
R40999:41001 Imp <> AId constr
R41003:41003 Imp <> X def
R40977:40992 Imp <> ::x_';;'_x not
R40950:40954 Imp <> ::x_'::='_x not
R40949:40949 Imp <> X def
R40955:40959 Imp <> APlus constr
R40970:40973 Imp <> ANum constr
R40962:40964 Imp <> AId constr
R40966:40966 Imp <> X def
R40994:40998 Imp <> ::x_'::='_x not
R40993:40993 Imp <> Y def
R40999:41001 Imp <> AId constr
R41003:41003 Imp <> X def
R41060:41075 Imp <> ::x_';;'_x not
R41033:41037 Imp <> ::x_'::='_x not
R41032:41032 Imp <> X def
R41038:41042 Imp <> APlus constr
R41053:41056 Imp <> ANum constr
R41045:41047 Imp <> AId constr
R41049:41049 Imp <> X def
R41077:41081 Imp <> ::x_'::='_x not
R41076:41076 Imp <> Y def
R41082:41086 Imp <> APlus constr
R41097:41100 Imp <> ANum constr
R41089:41091 Imp <> AId constr
R41093:41093 Imp <> X def
R41060:41075 Imp <> ::x_';;'_x not
R41033:41037 Imp <> ::x_'::='_x not
R41032:41032 Imp <> X def
R41038:41042 Imp <> APlus constr
R41053:41056 Imp <> ANum constr
R41045:41047 Imp <> AId constr
R41049:41049 Imp <> X def
R41077:41081 Imp <> ::x_'::='_x not
R41076:41076 Imp <> Y def
R41082:41086 Imp <> APlus constr
R41097:41100 Imp <> ANum constr
R41089:41091 Imp <> AId constr
R41093:41093 Imp <> X def
R41130:41135 Equiv <> cequiv def
R41130:41135 Equiv <> cequiv def
R41355:41360 Imp <> update def
R41387:41387 Imp <> Y def
R41363:41368 Imp <> update def
R41382:41382 Imp <> X def
R41370:41380 Imp <> empty_state def
R41355:41360 Imp <> update def
R41387:41387 Imp <> Y def
R41363:41368 Imp <> update def
R41382:41382 Imp <> X def
R41370:41380 Imp <> empty_state def
R41412:41417 Imp <> update def
R41444:41444 Imp <> Y def
R41420:41425 Imp <> update def
R41439:41439 Imp <> X def
R41427:41437 Imp <> empty_state def
R41412:41417 Imp <> update def
R41444:41444 Imp <> Y def
R41420:41425 Imp <> update def
R41439:41439 Imp <> X def
R41427:41437 Imp <> empty_state def
R41473:41475 Imp <> ::x_'/'_x_'||'_x not
R41487:41490 Imp <> ::x_'/'_x_'||'_x not
R41476:41486 Imp <> empty_state def
R41513:41515 Imp <> ::x_'/'_x_'||'_x not
R41527:41530 Imp <> ::x_'/'_x_'||'_x not
R41516:41526 Imp <> empty_state def
R41584:41589 Imp <> update def
R41603:41603 Imp <> X def
R41591:41601 Imp <> empty_state def
R41564:41568 Imp <> E_Seq constr
R41624:41628 Imp <> E_Ass constr
R41473:41475 Imp <> ::x_'/'_x_'||'_x not
R41487:41490 Imp <> ::x_'/'_x_'||'_x not
R41476:41486 Imp <> empty_state def
R41513:41515 Imp <> ::x_'/'_x_'||'_x not
R41527:41530 Imp <> ::x_'/'_x_'||'_x not
R41516:41526 Imp <> empty_state def
R41513:41515 Imp <> ::x_'/'_x_'||'_x not
R41527:41530 Imp <> ::x_'/'_x_'||'_x not
R41516:41526 Imp <> empty_state def
R41584:41589 Imp <> update def
R41603:41603 Imp <> X def
R41591:41601 Imp <> empty_state def
R41564:41568 Imp <> E_Seq constr
R41624:41628 Imp <> E_Ass constr
R41624:41628 Imp <> E_Ass constr
R41584:41589 Imp <> update def
R41603:41603 Imp <> X def
R41591:41601 Imp <> empty_state def
R41564:41568 Imp <> E_Seq constr
R41624:41628 Imp <> E_Ass constr
R41624:41628 Imp <> E_Ass constr
R41584:41589 Imp <> update def
R41603:41603 Imp <> X def
R41591:41601 Imp <> empty_state def
R41564:41568 Imp <> E_Seq constr
R41624:41628 Imp <> E_Ass constr
R41624:41628 Imp <> E_Ass constr
R41584:41589 Imp <> update def
R41603:41603 Imp <> X def
R41591:41601 Imp <> empty_state def
R41564:41568 Imp <> E_Seq constr
R41783:41785 Coq.Init.Logic <> :type_scope:x_'='_x not
R41806:41824 Imp <> ceval_deterministic thm
R41829:41839 Imp <> empty_state def
R41783:41785 Coq.Init.Logic <> :type_scope:x_'='_x not
R41806:41824 Imp <> ceval_deterministic thm
R41829:41839 Imp <> empty_state def
R41881:41883 Coq.Init.Logic <> :type_scope:x_'='_x not
R41880:41880 Imp <> Y def
R41888:41888 Imp <> Y def
R41881:41883 Coq.Init.Logic <> :type_scope:x_'='_x not
R41880:41880 Imp <> Y def
R41888:41888 Imp <> Y def
ind 42295:42314 <> var_not_used_in_aexp
constr 42345:42350 <> VNUNum
constr 42399:42403 <> VNUId
constr 42461:42467 <> VNUPlus
constr 42602:42609 <> VNUMinus
constr 42745:42751 <> VNUMult
R42319:42320 SfLib <> id ind
R42325:42328 Imp <> aexp ind
R42363:42382 Equiv <> var_not_used_in_aexp ind
R42387:42390 Imp <> ANum constr
R42392:42392 Equiv <> n var
R42426:42445 Equiv <> var_not_used_in_aexp ind
R42450:42452 Imp <> AId constr
R42454:42454 Equiv <> Y var
R42417:42420 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R42421:42421 Equiv <> Y var
R42561:42580 Equiv <> var_not_used_in_aexp ind
R42585:42589 Imp <> APlus constr
R42594:42595 Equiv <> a2 var
R42591:42592 Equiv <> a1 var
R42526:42545 Equiv <> var_not_used_in_aexp ind
R42549:42550 Equiv <> a2 var
R42491:42510 Equiv <> var_not_used_in_aexp ind
R42514:42515 Equiv <> a1 var
R42703:42722 Equiv <> var_not_used_in_aexp ind
R42727:42732 Imp <> AMinus constr
R42737:42738 Equiv <> a2 var
R42734:42735 Equiv <> a1 var
R42668:42687 Equiv <> var_not_used_in_aexp ind
R42691:42692 Equiv <> a2 var
R42633:42652 Equiv <> var_not_used_in_aexp ind
R42656:42657 Equiv <> a1 var
R42845:42864 Equiv <> var_not_used_in_aexp ind
R42869:42873 Imp <> AMult constr
R42878:42879 Equiv <> a2 var
R42875:42876 Equiv <> a1 var
R42810:42829 Equiv <> var_not_used_in_aexp ind
R42833:42834 Equiv <> a2 var
R42775:42794 Equiv <> var_not_used_in_aexp ind
R42798:42799 Equiv <> a1 var
prf 42890:42904 <> aeval_weakening
R42982:42984 Coq.Init.Logic <> :type_scope:x_'='_x not
R42958:42962 Imp <> aeval def
R42981:42981 Equiv <> a var
R42965:42970 Imp <> update def
R42977:42978 Equiv <> ni var
R42975:42975 Equiv <> i var
R42972:42973 Equiv <> st var
R42985:42989 Imp <> aeval def
R42994:42994 Equiv <> a var
R42991:42992 Equiv <> st var
R42928:42947 Equiv <> var_not_used_in_aexp ind
R42951:42951 Equiv <> a var
R42949:42949 Equiv <> i var
prf 43303:43318 <> inequiv_exercise
R43324:43325 Coq.Init.Logic <> :type_scope:'~'_x not
R43326:43331 Equiv <> cequiv def
R43359:43362 Imp <> ::'SKIP' not
R43334:43339 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R43345:43348 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R43353:43356 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R43340:43344 Imp <> BTrue constr
R43349:43352 Imp <> ::'SKIP' not
mod 45392:45395 <> Himp
ind 45500:45502 Himp com
constr 45518:45522 Himp CSkip
constr 45534:45537 Himp CAss
constr 45563:45566 Himp CSeq
constr 45592:45594 Himp CIf
constr 45628:45633 Himp CWhile
constr 45660:45665 Himp CHavoc
R45526:45528 Equiv <> com ind
R45555:45557 Equiv <> com ind
R45547:45550 Imp <> aexp ind
R45541:45542 SfLib <> id ind
R45584:45586 Equiv <> com ind
R45577:45579 Equiv <> com ind
R45570:45572 Equiv <> com ind
R45620:45622 Equiv <> com ind
R45613:45615 Equiv <> com ind
R45606:45608 Equiv <> com ind
R45598:45601 Imp <> bexp ind
R45652:45654 Equiv <> com ind
R45645:45647 Equiv <> com ind
R45637:45640 Imp <> bexp ind
R45675:45677 Equiv <> com ind
R45669:45670 SfLib <> id ind
R45924:45928 Equiv Himp CSkip constr
not 45910 Himp ::'SKIP'
R45958:45961 Equiv Himp CAss constr
not 45940 Himp ::x_'::='_x
R46009:46012 Equiv Himp CSeq constr
not 45992 Himp ::x_';;'_x
R46097:46102 Equiv Himp CWhile constr
not 46066 Himp ::'WHILE'_x_'DO'_x_'END'
R46196:46198 Equiv Himp CIf constr
not 46154 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R46271:46276 Equiv Himp CHavoc constr
not 46255 Himp ::'HAVOC'_x
ind 46686:46690 Himp ceval
constr 46731:46736 Himp E_Skip
constr 46779:46783 Himp E_Ass
constr 46907:46911 Himp E_Seq
constr 47037:47044 Himp E_IfTrue
constr 47213:47221 Himp E_IfFalse
constr 47393:47402 Himp E_WhileEnd
constr 47526:47536 Himp E_WhileLoop
R46710:46714 Imp <> state def
R46701:46705 Imp <> state def
R46694:46696 Equiv Himp com ind
R47830:47834 Equiv <> ceval ind
R46752:46756 Imp <> state def
R46763:46765 Equiv Himp ::x_'/'_x_'||'_x not
R46768:46771 Equiv Himp ::x_'/'_x_'||'_x not
R46759:46762 Equiv Himp ::'SKIP' not
R46766:46767 Equiv <> st var
R46772:46773 Equiv <> st var
R46800:46804 Imp <> state def
R46813:46816 Imp <> aexp ind
R46824:46826 Coq.Init.Datatypes <> nat ind
R46834:46835 SfLib <> id ind
R46870:46870 Equiv Himp ::x_'/'_x_'||'_x not
R46879:46882 Equiv Himp ::x_'/'_x_'||'_x not
R46885:46888 Equiv Himp ::x_'/'_x_'||'_x not
R46872:46876 Equiv Himp ::x_'::='_x not
R46871:46871 Equiv <> X var
R46877:46878 Equiv <> a1 var
R46883:46884 Equiv <> st var
R46889:46894 Imp <> update def
R46901:46901 Equiv <> n var
R46899:46899 Equiv <> X var
R46896:46897 Equiv <> st var
R46862:46864 Coq.Init.Logic <> :type_scope:x_'='_x not
R46851:46855 Imp <> aeval def
R46860:46861 Equiv <> a1 var
R46857:46858 Equiv <> st var
R46865:46865 Equiv <> n var
R46931:46933 Equiv Himp com ind
R46951:46955 Imp <> state def
R47009:47009 Equiv Himp ::x_'/'_x_'||'_x not
R47018:47021 Equiv Himp ::x_'/'_x_'||'_x not
R47024:47027 Equiv Himp ::x_'/'_x_'||'_x not
R47012:47015 Equiv Himp ::x_';;'_x not
R47010:47011 Equiv <> c1 var
R47016:47017 Equiv <> c2 var
R47022:47023 Equiv <> st var
R47028:47031 Equiv <> st'' var
R46991:46993 Equiv Himp ::x_'/'_x_'||'_x not
R46997:47000 Equiv Himp ::x_'/'_x_'||'_x not
R46989:46990 Equiv <> c2 var
R46994:46996 Equiv <> st' var
R47001:47004 Equiv <> st'' var
R46973:46975 Equiv Himp ::x_'/'_x_'||'_x not
R46978:46981 Equiv Himp ::x_'/'_x_'||'_x not
R46971:46972 Equiv <> c1 var
R46976:46977 Equiv <> st var
R46982:46984 Equiv <> st' var
R47065:47069 Imp <> state def
R47078:47081 Imp <> bexp ind
R47093:47095 Equiv Himp com ind
R47169:47169 Equiv Himp ::x_'/'_x_'||'_x not
R47195:47198 Equiv Himp ::x_'/'_x_'||'_x not
R47201:47204 Equiv Himp ::x_'/'_x_'||'_x not
R47170:47173 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47176:47181 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47184:47189 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47192:47194 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47174:47175 Equiv <> b1 var
R47182:47183 Equiv <> c1 var
R47190:47191 Equiv <> c2 var
R47199:47200 Equiv <> st var
R47205:47207 Equiv <> st' var
R47153:47155 Equiv Himp ::x_'/'_x_'||'_x not
R47158:47161 Equiv Himp ::x_'/'_x_'||'_x not
R47151:47152 Equiv <> c1 var
R47156:47157 Equiv <> st var
R47162:47164 Equiv <> st' var
R47125:47127 Coq.Init.Logic <> :type_scope:x_'='_x not
R47114:47118 Imp <> beval def
R47123:47124 Equiv <> b1 var
R47120:47121 Equiv <> st var
R47128:47131 Coq.Init.Datatypes <> true constr
R47242:47246 Imp <> state def
R47255:47258 Imp <> bexp ind
R47270:47272 Equiv Himp com ind
R47349:47349 Equiv Himp ::x_'/'_x_'||'_x not
R47375:47378 Equiv Himp ::x_'/'_x_'||'_x not
R47381:47384 Equiv Himp ::x_'/'_x_'||'_x not
R47350:47353 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47356:47361 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47364:47369 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47372:47374 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47354:47355 Equiv <> b1 var
R47362:47363 Equiv <> c1 var
R47370:47371 Equiv <> c2 var
R47379:47380 Equiv <> st var
R47385:47387 Equiv <> st' var
R47333:47335 Equiv Himp ::x_'/'_x_'||'_x not
R47338:47341 Equiv Himp ::x_'/'_x_'||'_x not
R47331:47332 Equiv <> c2 var
R47336:47337 Equiv <> st var
R47342:47344 Equiv <> st' var
R47303:47305 Coq.Init.Logic <> :type_scope:x_'='_x not
R47292:47296 Imp <> beval def
R47301:47302 Equiv <> b1 var
R47298:47299 Equiv <> st var
R47306:47310 Coq.Init.Datatypes <> false constr
R47419:47422 Imp <> bexp ind
R47431:47435 Imp <> state def
R47444:47446 Equiv Himp com ind
R47490:47490 Equiv Himp ::x_'/'_x_'||'_x not
R47509:47512 Equiv Himp ::x_'/'_x_'||'_x not
R47515:47518 Equiv Himp ::x_'/'_x_'||'_x not
R47491:47496 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R47499:47502 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R47505:47508 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R47497:47498 Equiv <> b1 var
R47503:47504 Equiv <> c1 var
R47513:47514 Equiv <> st var
R47519:47520 Equiv <> st var
R47478:47480 Coq.Init.Logic <> :type_scope:x_'='_x not
R47467:47471 Imp <> beval def
R47476:47477 Equiv <> b1 var
R47473:47474 Equiv <> st var
R47481:47485 Coq.Init.Datatypes <> false constr
R47562:47566 Imp <> state def
R47575:47578 Imp <> bexp ind
R47587:47589 Equiv Himp com ind
R47743:47743 Equiv Himp ::x_'/'_x_'||'_x not
R47762:47765 Equiv Himp ::x_'/'_x_'||'_x not
R47768:47771 Equiv Himp ::x_'/'_x_'||'_x not
R47744:47749 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R47752:47755 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R47758:47761 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R47750:47751 Equiv <> b1 var
R47756:47757 Equiv <> c1 var
R47766:47767 Equiv <> st var
R47772:47775 Equiv <> st'' var
R47687:47687 Equiv Himp ::x_'/'_x_'||'_x not
R47706:47709 Equiv Himp ::x_'/'_x_'||'_x not
R47713:47716 Equiv Himp ::x_'/'_x_'||'_x not
R47688:47693 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R47696:47699 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R47702:47705 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R47694:47695 Equiv <> b1 var
R47700:47701 Equiv <> c1 var
R47710:47712 Equiv <> st' var
R47717:47720 Equiv <> st'' var
R47653:47655 Equiv Himp ::x_'/'_x_'||'_x not
R47658:47661 Equiv Himp ::x_'/'_x_'||'_x not
R47651:47652 Equiv <> c1 var
R47656:47657 Equiv <> st var
R47662:47664 Equiv <> st' var
R47622:47624 Coq.Init.Logic <> :type_scope:x_'='_x not
R47611:47615 Imp <> beval def
R47620:47621 Equiv <> b1 var
R47617:47618 Equiv <> st var
R47625:47628 Coq.Init.Datatypes <> true constr
R47830:47834 Equiv Himp ceval ind
not 47805 Himp ::x_'/'_x_'||'_x
def 48208:48221 Himp havoc_example1
R48225:48225 Equiv Himp ::x_'/'_x_'||'_x not
R48233:48236 Equiv Himp ::x_'/'_x_'||'_x not
R48248:48251 Equiv Himp ::x_'/'_x_'||'_x not
R48226:48231 Equiv Himp ::'HAVOC'_x not
R48232:48232 Imp <> X def
R48237:48247 Imp <> empty_state def
R48252:48257 Imp <> update def
R48271:48271 Imp <> X def
R48259:48269 Imp <> empty_state def
def 48321:48334 Himp havoc_example2
R48340:48340 Equiv Himp ::x_'/'_x_'||'_x not
R48355:48358 Equiv Himp ::x_'/'_x_'||'_x not
R48370:48373 Equiv Himp ::x_'/'_x_'||'_x not
R48345:48347 Equiv Himp ::x_';;'_x not
R48341:48344 Equiv Himp ::'SKIP' not
R48348:48353 Equiv Himp ::'HAVOC'_x not
R48354:48354 Imp <> Z def
R48359:48369 Imp <> empty_state def
R48374:48379 Imp <> update def
R48393:48393 Imp <> Z def
R48381:48391 Imp <> empty_state def
def 48534:48539 Himp cequiv
R48550:48552 Equiv Himp com ind
R48581:48585 Imp <> state def
R48604:48608 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R48592:48594 Equiv Himp ::x_'/'_x_'||'_x not
R48597:48600 Equiv Himp ::x_'/'_x_'||'_x not
R48590:48591 Equiv <> c1 var
R48595:48596 Equiv <> st var
R48601:48603 Equiv <> st' var
R48611:48613 Equiv Himp ::x_'/'_x_'||'_x not
R48616:48619 Equiv Himp ::x_'/'_x_'||'_x not
R48609:48610 Equiv <> c2 var
R48614:48615 Equiv <> st var
R48620:48622 Equiv <> st' var
def 48922:48924 Himp pXY
R48938:48940 Equiv Himp ::x_';;'_x not
R48931:48936 Equiv Himp ::'HAVOC'_x not
R48937:48937 Imp <> X def
R48941:48946 Equiv Himp ::'HAVOC'_x not
R48947:48947 Imp <> Y def
def 48962:48964 Himp pYX
R48978:48980 Equiv Himp ::x_';;'_x not
R48971:48976 Equiv Himp ::'HAVOC'_x not
R48977:48977 Imp <> Y def
R48981:48986 Equiv Himp ::'HAVOC'_x not
R48987:48987 Imp <> X def
prf 49095:49108 Himp pXY_cequiv_pYX
R49128:49131 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R49114:49119 Equiv Himp cequiv def
R49125:49127 Equiv Himp pYX def
R49121:49123 Equiv Himp pXY def
R49132:49132 Coq.Init.Logic <> :type_scope:'~'_x not
R49133:49138 Equiv Himp cequiv def
R49144:49146 Equiv Himp pYX def
R49140:49142 Equiv Himp pXY def
def 49301:49306 Himp ptwice
R49320:49322 Equiv Himp ::x_';;'_x not
R49313:49318 Equiv Himp ::'HAVOC'_x not
R49319:49319 Imp <> X def
R49323:49328 Equiv Himp ::'HAVOC'_x not
R49329:49329 Imp <> Y def
def 49344:49348 Himp pcopy
R49362:49364 Equiv Himp ::x_';;'_x not
R49355:49360 Equiv Himp ::'HAVOC'_x not
R49361:49361 Imp <> X def
R49366:49370 Equiv Himp ::x_'::='_x not
R49365:49365 Imp <> Y def
R49371:49373 Imp <> AId constr
R49375:49375 Imp <> X def
prf 49546:49564 Himp ptwice_cequiv_pcopy
R49589:49592 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R49570:49575 Equiv Himp cequiv def
R49584:49588 Equiv Himp pcopy def
R49577:49582 Equiv Himp ptwice def
R49593:49593 Coq.Init.Logic <> :type_scope:'~'_x not
R49594:49599 Equiv Himp cequiv def
R49608:49612 Equiv Himp pcopy def
R49601:49606 Equiv Himp ptwice def
def 50450:50451 Himp p1
R50455:50457 Equiv Himp com ind
R50464:50470 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50498:50506 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50549:50554 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50471:50474 Imp <> BNot constr
R50477:50479 Imp <> BEq constr
R50490:50493 Imp <> ANum constr
R50482:50484 Imp <> AId constr
R50486:50486 Imp <> X def
R50514:50520 Equiv Himp ::x_';;'_x not
R50507:50512 Equiv Himp ::'HAVOC'_x not
R50513:50513 Imp <> Y def
R50522:50526 Equiv Himp ::x_'::='_x not
R50521:50521 Imp <> X def
R50527:50531 Imp <> APlus constr
R50542:50545 Imp <> ANum constr
R50534:50536 Imp <> AId constr
R50538:50538 Imp <> X def
def 50569:50570 Himp p2
R50574:50576 Equiv Himp com ind
R50583:50589 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50617:50625 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50630:50635 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50590:50593 Imp <> BNot constr
R50596:50598 Imp <> BEq constr
R50609:50612 Imp <> ANum constr
R50601:50603 Imp <> AId constr
R50605:50605 Imp <> X def
R50626:50629 Equiv Himp ::'SKIP' not
prf 50648:50658 Himp p1_p2_equiv
R50662:50667 Equiv Himp cequiv def
R50672:50673 Equiv Himp p2 def
R50669:50670 Equiv Himp p1 def
def 50724:50725 Himp p3
R50729:50731 Equiv Himp com ind
R50750:50754 Equiv Himp ::x_';;'_x not
R50739:50743 Equiv Himp ::x_'::='_x not
R50738:50738 Imp <> Z def
R50744:50747 Imp <> ANum constr
R50755:50761 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50789:50797 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50819:50824 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50762:50765 Imp <> BNot constr
R50768:50770 Imp <> BEq constr
R50781:50784 Imp <> ANum constr
R50773:50775 Imp <> AId constr
R50777:50777 Imp <> X def
R50805:50811 Equiv Himp ::x_';;'_x not
R50798:50803 Equiv Himp ::'HAVOC'_x not
R50804:50804 Imp <> X def
R50812:50817 Equiv Himp ::'HAVOC'_x not
R50818:50818 Imp <> Z def
def 50839:50840 Himp p4
R50844:50846 Equiv Himp com ind
R50867:50871 Equiv Himp ::x_';;'_x not
R50854:50859 Equiv Himp ::x_'::='_x not
R50866:50866 Equiv Himp ::x_'::='_x not
R50853:50853 Imp <> X def
R50860:50863 Imp <> ANum constr
R50873:50878 Equiv Himp ::x_'::='_x not
R50885:50885 Equiv Himp ::x_'::='_x not
R50872:50872 Imp <> Z def
R50879:50882 Imp <> ANum constr
prf 50898:50910 Himp p3_p4_inequiv
R50914:50915 Coq.Init.Logic <> :type_scope:'~'_x not
R50916:50921 Equiv Himp cequiv def
R50926:50927 Equiv Himp p4 def
R50923:50924 Equiv Himp p3 def
def 50978:50979 Himp p5
R50983:50985 Equiv Himp com ind
R50992:50998 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51026:51034 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51042:51047 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50999:51002 Imp <> BNot constr
R51005:51007 Imp <> BEq constr
R51018:51021 Imp <> ANum constr
R51010:51012 Imp <> AId constr
R51014:51014 Imp <> X def
R51035:51040 Equiv Himp ::'HAVOC'_x not
R51041:51041 Imp <> X def
def 51062:51063 Himp p6
R51067:51069 Equiv Himp com ind
R51077:51081 Equiv Himp ::x_'::='_x not
R51076:51076 Imp <> X def
R51082:51085 Imp <> ANum constr
prf 51100:51110 Himp p5_p6_equiv
R51114:51119 Equiv Himp cequiv def
R51124:51125 Equiv Himp p6 def
R51121:51122 Equiv Himp p5 def
R51179:51182 Equiv <> <> mod
def 52036:52042 <> stequiv
R52055:52059 Imp <> state def
R52084:52085 SfLib <> id ind
R52094:52096 Coq.Init.Logic <> :type_scope:x_'='_x not
R52089:52091 Equiv <> st1 var
R52093:52093 Equiv <> X var
R52097:52099 Equiv <> st2 var
R52101:52101 Equiv <> X var
R52133:52139 Equiv <> stequiv def
not 52115 <> ::x_'~'_x
prf 52412:52423 <> stequiv_refl
R52440:52444 Imp <> state def
R52453:52455 Equiv <> ::x_'~'_x not
R52451:52452 Equiv <> st var
R52456:52457 Equiv <> st var
prf 52568:52578 <> stequiv_sym
R52600:52604 Imp <> state def
R52630:52632 Equiv <> ::x_'~'_x not
R52627:52629 Equiv <> st2 var
R52633:52635 Equiv <> st1 var
R52614:52616 Equiv <> ::x_'~'_x not
R52611:52613 Equiv <> st1 var
R52617:52619 Equiv <> st2 var
prf 52752:52764 <> stequiv_trans
R52790:52794 Imp <> state def
R52836:52838 Equiv <> ::x_'~'_x not
R52833:52835 Equiv <> st1 var
R52839:52841 Equiv <> st3 var
R52820:52822 Equiv <> ::x_'~'_x not
R52817:52819 Equiv <> st2 var
R52823:52825 Equiv <> st3 var
R52804:52806 Equiv <> ::x_'~'_x not
R52801:52803 Equiv <> st1 var
R52807:52809 Equiv <> st2 var
prf 52987:53000 <> stequiv_update
R53022:53026 Imp <> state def
R53058:53059 SfLib <> id ind
R53065:53067 Coq.Init.Datatypes <> nat ind
R53087:53089 Equiv <> ::x_'~'_x not
R53073:53078 Imp <> update def
R53086:53086 Equiv <> n var
R53084:53084 Equiv <> X var
R53080:53082 Equiv <> st1 var
R53090:53095 Imp <> update def
R53103:53103 Equiv <> n var
R53101:53101 Equiv <> X var
R53097:53099 Equiv <> st2 var
R53035:53037 Equiv <> ::x_'~'_x not
R53032:53034 Equiv <> st1 var
R53038:53040 Equiv <> st2 var
prf 53347:53359 <> stequiv_aeval
R53381:53385 Imp <> state def
R53417:53420 Imp <> aexp ind
R53435:53437 Coq.Init.Logic <> :type_scope:x_'='_x not
R53424:53428 Imp <> aeval def
R53434:53434 Equiv <> a var
R53430:53432 Equiv <> st1 var
R53438:53442 Imp <> aeval def
R53448:53448 Equiv <> a var
R53444:53446 Equiv <> st2 var
R53395:53397 Equiv <> ::x_'~'_x not
R53392:53394 Equiv <> st1 var
R53398:53400 Equiv <> st2 var
prf 53563:53575 <> stequiv_beval
R53597:53601 Imp <> state def
R53633:53636 Imp <> bexp ind
R53651:53653 Coq.Init.Logic <> :type_scope:x_'='_x not
R53640:53644 Imp <> beval def
R53650:53650 Equiv <> b var
R53646:53648 Equiv <> st1 var
R53654:53658 Imp <> beval def
R53664:53664 Equiv <> b var
R53660:53662 Equiv <> st2 var
R53611:53613 Equiv <> ::x_'~'_x not
R53608:53610 Equiv <> st1 var
R53614:53616 Equiv <> st2 var
prf 53894:53906 <> stequiv_ceval
R53927:53931 Imp <> state def
R53963:53965 Imp <> com ind
R53975:53979 Imp <> state def
R54012:54018 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R54031:54037 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R54071:54071 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R54026:54030 Imp <> state def
R54038:54038 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R54054:54059 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R54040:54042 Imp <> ::x_'/'_x_'||'_x not
R54046:54049 Imp <> ::x_'/'_x_'||'_x not
R54039:54039 Equiv <> c var
R54043:54045 Equiv <> st2 var
R54050:54053 Equiv <> st2' var
R54064:54066 Equiv <> ::x_'~'_x not
R54060:54063 Equiv <> st1' var
R54067:54070 Equiv <> st2' var
R53989:53991 Imp <> ::x_'/'_x_'||'_x not
R53995:53998 Imp <> ::x_'/'_x_'||'_x not
R53988:53988 Equiv <> c var
R53992:53994 Equiv <> st1 var
R53999:54002 Equiv <> st1' var
R53940:53942 Equiv <> ::x_'~'_x not
R53937:53939 Equiv <> st1 var
R53943:53945 Equiv <> st2 var
R54285:54290 Imp <> update def
R54285:54290 Imp <> update def
R54362:54374 Equiv <> stequiv_aeval prfax
R54362:54374 Equiv <> stequiv_aeval prfax
R54403:54416 Equiv <> stequiv_update prfax
R54403:54416 Equiv <> stequiv_update prfax
R54594:54598 Imp <> E_Seq constr
R54594:54598 Imp <> E_Seq constr
R54749:54756 Imp <> E_IfTrue constr
R54749:54756 Imp <> E_IfTrue constr
R54790:54802 Equiv <> stequiv_beval prfax
R54790:54802 Equiv <> stequiv_beval prfax
R54953:54961 Imp <> E_IfFalse constr
R54953:54961 Imp <> E_IfFalse constr
R54994:55006 Equiv <> stequiv_beval prfax
R54994:55006 Equiv <> stequiv_beval prfax
R55106:55115 Imp <> E_WhileEnd constr
R55106:55115 Imp <> E_WhileEnd constr
R55148:55160 Equiv <> stequiv_beval prfax
R55148:55160 Equiv <> stequiv_beval prfax
R55364:55374 Imp <> E_WhileLoop constr
R55364:55374 Imp <> E_WhileLoop constr
R55425:55437 Equiv <> stequiv_beval prfax
R55425:55437 Equiv <> stequiv_beval prfax
ind 55907:55912 <> ceval'
constr 55953:55959 <> E_equiv
R55932:55936 Imp <> state def
R55923:55927 Imp <> state def
R55916:55918 Imp <> com ind
R56081:56086 Equiv <> ceval' ind
R56030:56032 Equiv <> ::x_'/'_x_'||'''_x not
R56035:56039 Equiv <> ::x_'/'_x_'||'''_x not
R56029:56029 Equiv <> c var
R56033:56034 Equiv <> st var
R56040:56043 Equiv <> st'' var
R56014:56016 Equiv <> ::x_'~'_x not
R56011:56013 Equiv <> st' var
R56017:56020 Equiv <> st'' var
R55990:55992 Imp <> ::x_'/'_x_'||'_x not
R55995:55998 Imp <> ::x_'/'_x_'||'_x not
R55989:55989 Equiv <> c var
R55993:55994 Equiv <> st var
R55999:56001 Equiv <> st' var
R56081:56086 Equiv <> ceval' ind
not 56055 <> ::x_'/'_x_'||'''_x
def 56176:56182 <> cequiv'
R56193:56195 Imp <> com ind
R56227:56231 Imp <> state def
R56239:56239 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R56255:56261 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R56277:56277 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R56242:56244 Equiv <> ::x_'/'_x_'||'''_x not
R56247:56251 Equiv <> ::x_'/'_x_'||'''_x not
R56240:56241 Equiv <> c1 var
R56245:56246 Equiv <> st var
R56252:56254 Equiv <> st' var
R56264:56266 Equiv <> ::x_'/'_x_'||'''_x not
R56269:56273 Equiv <> ::x_'/'_x_'||'''_x not
R56262:56263 Equiv <> c2 var
R56267:56268 Equiv <> st var
R56274:56276 Equiv <> st' var
prf 56449:56463 <> cequiv__cequiv'
R56482:56484 Imp <> com ind
R56506:56512 Equiv <> cequiv' def
R56517:56518 Equiv <> c2 var
R56514:56515 Equiv <> c1 var
R56490:56495 Equiv <> cequiv def
R56500:56501 Equiv <> c2 var
R56497:56498 Equiv <> c1 var
R56538:56543 Equiv <> cequiv def
R56546:56552 Equiv <> cequiv' def
R56604:56610 Equiv <> E_equiv constr
R56604:56610 Equiv <> E_equiv constr
R56706:56712 Equiv <> E_equiv constr
R56706:56712 Equiv <> E_equiv constr
def 56935:56954 <> identity_assignment'
R56960:56966 Equiv <> cequiv' def
R56975:56979 Imp <> ::x_'::='_x not
R56974:56974 Imp <> X def
R56980:56982 Imp <> AId constr
R56984:56984 Imp <> X def
R56968:56971 Imp <> ::'SKIP' not
R57006:57012 Equiv <> cequiv' def
R57141:57146 Imp <> update def
R57161:57161 Imp <> X def
R57153:57153 Imp <> X def
R57127:57133 Equiv <> E_equiv constr
R57141:57146 Imp <> update def
R57161:57161 Imp <> X def
R57153:57153 Imp <> X def
R57127:57133 Equiv <> E_equiv constr
R57206:57218 Equiv <> stequiv_trans prfax
R57206:57218 Equiv <> stequiv_trans prfax
R57246:57252 Equiv <> stequiv def
R57269:57279 Imp <> update_same prfax
R57269:57279 Imp <> update_same prfax
prf 58654:58684 <> swap_noninterfering_assignments
R58788:58793 Equiv <> cequiv def
R58837:58839 Imp <> ::x_';;'_x not
R58830:58834 Imp <> ::x_'::='_x not
R58828:58829 Equiv <> l2 var
R58835:58836 Equiv <> a2 var
R58842:58846 Imp <> ::x_'::='_x not
R58840:58841 Equiv <> l1 var
R58847:58848 Equiv <> a1 var
R58809:58811 Imp <> ::x_';;'_x not
R58802:58806 Imp <> ::x_'::='_x not
R58800:58801 Equiv <> l1 var
R58807:58808 Equiv <> a1 var
R58814:58818 Imp <> ::x_'::='_x not
R58812:58813 Equiv <> l2 var
R58819:58820 Equiv <> a2 var
R58756:58775 Equiv <> var_not_used_in_aexp ind
R58780:58781 Equiv <> a1 var
R58777:58778 Equiv <> l2 var
R58724:58743 Equiv <> var_not_used_in_aexp ind
R58748:58749 Equiv <> a2 var
R58745:58746 Equiv <> l1 var
R58711:58714 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R58709:58710 Equiv <> l1 var
R58715:58716 Equiv <> l2 var
